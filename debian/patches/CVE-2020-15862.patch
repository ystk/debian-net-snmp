Description: snmpd: Disable NET-SNMP-EXTEND-MIB support by default
 Since it is possible to abuse this MIB for privilege escalation attacks,
 disable it by default. Notes:
 - It is still possible to enable this MIB via the --with-mib-modules
   configure option.
 - Another MIB that provides similar functionality, namely
   ucd-snmp/extensible, is disabled by default.
 - The security risk of ucd-snmp/pass and ucd-snmp/pass_persist is lower
   since these modules only introduce a security risk if the invoked
   scripts are exploitable.
Author: Bart Van Assche <bvanassche@acm.org>
Origin: upstream, https://github.com/net-snmp/net-snmp/commit/c2b96ee744392243782094432f657ded4e985a07
Bug-Debian: https://bugs.debian.org/965166
Reviewed-by: Craig Small <csmall@debian.org>
Last-Update: 2020-07-20
--- net-snmp-5.7.2.1+dfsg.orig/agent/mibgroup/agent/extend.c
+++ net-snmp-5.7.2.1+dfsg/agent/mibgroup/agent/extend.c
@@ -16,6 +16,12 @@
 #define SHELLCOMMAND 3
 #endif
 
+/*  This mib is potentially dangerous to turn on by default, since it
+ *  allows arbitrary commands to be set by anyone with SNMP WRITE
+ *  access to the MIB table.  If all of your users are "root" level
+ *  users, then it may be safe to turn on. */
+#define ENABLE_EXTEND_WRITE_ACCESS 0
+
 netsnmp_feature_require(extract_table_row_data)
 netsnmp_feature_require(table_data_delete_table)
 #ifndef NETSNMP_NO_WRITE_SUPPORT
@@ -712,7 +718,7 @@ handle_nsExtendConfigTable(netsnmp_mib_h
          *
          **********/
 
-#ifndef NETSNMP_NO_WRITE_SUPPORT
+#if !defined(NETSNMP_NO_WRITE_SUPPORT) && ENABLE_EXTEND_WRITE_ACCESS
         case MODE_SET_RESERVE1:
             /*
              * Validate the new assignments
@@ -1038,7 +1044,7 @@ handle_nsExtendConfigTable(netsnmp_mib_h
                 }
             }
             break;
-#endif /* !NETSNMP_NO_WRITE_SUPPORT */ 
+#endif /* !NETSNMP_NO_WRITE_SUPPORT and ENABLE_EXTEND_WRITE_ACCESS */
 
         default:
             netsnmp_set_request_error(reqinfo, request, SNMP_ERR_GENERR);
@@ -1046,7 +1052,7 @@ handle_nsExtendConfigTable(netsnmp_mib_h
         }
     }
 
-#ifndef NETSNMP_NO_WRITE_SUPPORT
+#if !defined(NETSNMP_NO_WRITE_SUPPORT) && ENABLE_EXTEND_WRITE_ACCESS
     /*
      * If we're marking a given row as active,
      *  then we need to check that it's ready.
@@ -1071,7 +1077,7 @@ handle_nsExtendConfigTable(netsnmp_mib_h
             }
         }
     }
-#endif /* !NETSNMP_NO_WRITE_SUPPORT */
+#endif /* !NETSNMP_NO_WRITE_SUPPORT && ENABLE_EXTEND_WRITE_ACCESS */
     
     return SNMP_ERR_NOERROR;
 }
@@ -1529,7 +1535,7 @@ fixExec2Error(int action,
     idx = name[name_len-1] -1;
     exten = &compatability_entries[ idx ];
 
-#ifndef NETSNMP_NO_WRITE_SUPPORT
+#if !defined(NETSNMP_NO_WRITE_SUPPORT) && ENABLE_EXTEND_WRITE_ACCESS
     switch (action) {
     case MODE_SET_RESERVE1:
         if (var_val_type != ASN_INTEGER) {
@@ -1550,7 +1556,7 @@ fixExec2Error(int action,
     case MODE_SET_COMMIT:
         netsnmp_cache_check_and_reload( exten->efix_entry->cache );
     }
-#endif /* !NETSNMP_NO_WRITE_SUPPORT */
+#endif /* !NETSNMP_NO_WRITE_SUPPORT && ENABLE_EXTEND_WRITE_ACCESS */
     return SNMP_ERR_NOERROR;
 }
 #endif /* USING_UCD_SNMP_EXTENSIBLE_MODULE */
